---
urlcolor: blue
header-includes: |
    \usepackage[T1]{fontenc}
    \usepackage{inconsolata}
    \usepackage{listings}
    \lstset{backgroundcolor=\color{lstgrey}}
---

# Characters & strings

\centering

\Large

Ben Langmead

ben.langmead@gmail.com

www.langmead-lab.org

\centerline{\includegraphics[width=2in]{../images/jhu_vertical_blue.png} \includegraphics[width=2in]{../images/wse_vertical_blue.png}}

\centerline{\includegraphics[width=0.75in]{../images/cc_by.png}}

\footnotesize

Source markdown available at [github.com/BenLangmead/c-cpp-notes](https://github.com/BenLangmead/c-cpp-notes)

# Characters

`char` variable holds a single character

* `char digit = '4';`
* `char bang = '!';`
* These *must* be single quotes; double quotes are for strings only

Behind the scenes, `char` is much like `int`

* This is valid: `char digit = '4' - 1;`
* `digit` now contains the character `'3'`

`printf` format string for `char` is `%c`

# ASCII

* ASCII or a similar standard governs the mapping between characters and integers

\centerline{\includegraphics[width=3.5in]{chars-table-landscape.jpg}}

# Character example

\footnotesize

<!---cppmd-file convert_digit_0.c
#include <stdio.h>

// Convert decimal character into corresponding int
int main() {
    char char_0 = '0';
    int int_0 = char_0 - '0';
    printf("Character printed as character: %c\n", char_0);
    printf("Character printed as integer: %d\n", char_0);
    printf("Integer printed as integer: %d\n", int_0);
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Character example

\footnotesize

<!---cppmd-file convert_digit_7.c
#include <stdio.h>

// Convert decimal character into corresponding int
int main() {
    char char_7 = '7';
    int int_7 = char_7 - '0';
    printf("Character printed as character: %c\n", char_7);
    printf("Character printed as integer: %d\n", char_7);
    printf("Integer printed as integer: %d\n", int_7);
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Strings

"Hello world"

"1.e4 e5 2.Nf3 f6 3.Nxe5 fxe5"

"GATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCAT"

"BAC -0.3 GOOGL +0.8 CIT -1.2"

# Strings

In C, a string is an array of characters with final character equal to the "null character" `'\0'`

# Strings

* Declaring a string:

```c
char day[] = "monday";
// alternately
const char *day_ptr = "monday";
```

First declaration shows a string is like an *array*

Second shows a string is like a *pointer*

# Strings

* Array of characters with final character equal to the "null character" `'\0'`

```c
// this definition:
char day1[] = "monday";

// is the same as this:
char day2[] = {'m', 'o', 'n', 'd', 'a', 'y', '\0'};
```

# Strings

* Access elements of the string using *square bracket* notation (AKA *indexing*)

\footnotesize

<!---cppmd-file string_indexing_1.c
#include <stdio.h>

// Convert decimal character into corresponding int
int main() {
    const char str[] = "hello";
    printf("%c %c %c\n", str[1], str[2], str[4]);
    return 0;
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Strings

To print a string with `printf`, use `%s`

\footnotesize

<!---cppmd-file string_indexing_1.c
#include <stdio.h>

// Convert decimal character into corresponding int
int main() {
    const char str[] = "World";
    printf("Hello, %s!\n", str);
    return 0;
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Strings

What's the mistake?

\footnotesize

<!---cppmd-file string_copy_1.c
#include <stdio.h>

int main() {
    const char str[] = "hello";
    char str_copy[5];
    for(int i = 0; i < 5; i++) {
        str_copy[i] = str[i];
    }
    printf("%s\n", str);
    printf("%s\n", str_copy);
    return 0;
}
-->

# Strings

```
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
```

\includegraphics[width=0.8in]{hello_garbage.png}

We failed to null terminate the second string, so `printf` prints a few characters beyond the end of the string.  That's memory we don't own and didn't initialize -- it "undefined" and could be anything.

# Strings

\footnotesize

<!---cppmd-file string_copy_2.c
#include <stdio.h>

int main() {
    const char str[] = "hello";
    char str_copy[6]; // was [5]
    for(int i = 0; i < 6; i++) { // was i < 5
        str_copy[i] = str[i];
    }
    printf("%s\n", str);
    printf("%s\n", str_copy);
    return 0;
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Strings

`#include <string.h>` for helpful string functions:

`strlen(s)` returns length of string `s`
`strcmp(s1, s2)` compares two strings alphabetically

    * negative: `s1 alphabetically before `s2`
    * zero: `s1` and `s2` equal
    * positive: `s2` alphabetically before `s1`

See also: `strcpy`, `strcat`, `strtok`, others

    * [`www.cplusplus.com/reference/cstring/`](http://www.cplusplus.com/reference/cstring/)



# Characters and strings

<!---cppmd-file no-echo count_bases_1.c
#include <stdio.h>
#include <string.h>

// printf declared in stdio.h
// strlen declared in string.h

int main(void) {
    // "dna" holds beginning of human mitochrondrial genome sequence
    const char *dna = "GATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCAT"
                      "TTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTG"
                      "GAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATT"
                      "CTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACCTACTA"
                      "AAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAACAATTGAAT";

    // Note: above is one long string literal, wrapped across lines

    int num_a = 0;
    int num_c = 0;
    int num_g = 0;
    int num_t = 0;

    // strlen is a function that returns the length of the string
    int dna_len = strlen(dna);

    for(int i = 0; i < dna_len; i++) {
        char dna_char = dna[i];
        // TODO: tally As, Cs, Gs, and Ts
    }

    printf("A:%d, C:%d, G:%d, T:%d\n", num_a, num_c, num_g, num_t);
}
-->

<!---cppmd-shell no-echo
mkdir -p ~/cs120; chmod a+rx ~/cs120
cp %PREV% ~/cs120 ; chmod a+r ~/cs120/%PREV%
-->

<!--

# DNA exercise

* Log into CS undergraduate cluster
    * Terminal: `ssh ` ***user*** `@ugrad` ***[1-24]*** `.cs.jhu.edu`
    * PuTTY: connect to: `ugrad` ***[1-24]*** `.cs.jhu.edu`
* `mkdir -p cs120/2_01`
* `cd cs120/2_01`
* `cp ~langmea/cs120/count_bases.c .`
* `emacs count_bases.c`
    * Or your favorite `emacs` alternative
* To test:
    * `gcc count_bases.c -std=c99 -pedantic -Wall -Wextra`
    * `./a.out`

# Text exercise

<!---cppmd-file no-echo count_chars.c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

// printf declared in stdio.h
// strlen declared in string.h

// isalpha, isdigit, isspace declared in ctype.h
// See also: http://www.cplusplus.com/reference/cctype/

int main(void) {
    const char *text = "4 score and 7 years ago our fathers brought "
                       "4th on this continent, a new nation, "
                       "conceived in Liberty, and dedic8d to the "
                       "proposition that all men are cre8d =";

    int num_alpha = 0;  // # alphabet chars ('A'-'Z' and 'a'-'z')
    int num_digits = 0; // # digit chars ('0' - '9')
    int num_space = 0;  // # whitespace chars (spaces, tabs, newlines, etc)

    int text_len = strlen(text);

    int i = 0;
    while(i < text_len) { // don't modify the while loop or its condition
        // TODO: count alphabetical, digit and whitespace characters
    };

    // Special challenge: instead of using isalpha, isdigit and
    // isspace, use relational operators and your knowledge of the
    // characters' ASCII values: http://www.asciitable.com

    printf("# alphabetical:%d, # digit:%d, # whitespace:%d\n",
           num_alpha, num_digits, num_space);
}
-->

<!---cppmd-shell no-echo
mkdir -p ~/cs120; chmod a+rx ~/cs120
cp %PREV% ~/cs120 ; chmod a+r ~/cs120/%PREV%
-->

* (Assuming you're still in `cs120/2_01` subdirectory)
* `cp ~langmea/cs120/count_chars.c .`
* `emacs count_chars.c`
    * Or your favorite `emacs` alternative
* To test:
    * `gcc count_chars.c -std=c99 -pedantic -Wall -Wextra`
    * `./a.out`

-->

# Characters, strings

* `char` variable holds a character
    * `char digit = '4';`
    * `char bang = '!';`
    * Note: *single* quotes for `char`s, *double* quotes are for strings.  C/C++ is strict about this.
* Behind the scenes, `char` is just like `int`
    * This is valid: `char digit = '4' - 1;`
    * `digit` now contains the character `'3'`

# ASCII

ASCII or a similar standard governs the mapping between characters and integers

\vspace{5mm}
\centerline{\includegraphics[width=3.5in]{chars-table-landscape.jpg}}

\footnotesize

http://www.charstable.com/_site_media/ascii/chars-table-landscape.jpg

# Character example

\footnotesize

<!---cppmd-file convert_digit_0.c
#include <stdio.h>

// Convert decimal character into corresponding int
int main(void) {
    char char_0 = '0';
    int int_0 = char_0 - '0';
    printf("Character printed as character: %c\n", char_0);
    printf("Character printed as integer: %d\n", char_0);
    printf("Integer printed as integer: %d\n", int_0);
}
-->

<!---cppmd-shell
gcc convert_digit_0.c -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Character example

\footnotesize

<!---cppmd-file convert_digit_7.c
#include <stdio.h>

// Convert decimal character into corresponding int
int main(void) {
    char char_7 = '7';
    int int_7 = char_7 - '0';
    printf("Character printed as character: %c\n", char_7);
    printf("Character printed as integer: %d\n", char_7);
    printf("Integer printed as integer: %d\n", int_7);
}
-->

<!---cppmd-shell
gcc convert_digit_7.c -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Strings

* A sequence of characters handled as a unit
* In C, a string is an array of characters with final character equal to the "null character" `'\0'`

Arrays are examined in more depth elsewhere

# Strings

* Declaring a string:

```c
char day[] = "monday";
// alternately
const char *day_ptr = "monday";
```

* First declaration shows a string is like an *array*
* Second shows a string is like a *pointer*
* More on this later

# Strings

* Array of characters with final character equal to the "null character" `'\0'`

```c
// this definition:
char day1[] = "monday";

// is the same as this:
char day2[] = {'m', 'o', 'n', 'd', 'a', 'y', '\0'};
```

# Strings

* Access elements of the string using *square bracket* notation (AKA *indexing*)

\footnotesize

<!---cppmd-file string_indexing_1.c
#include <stdio.h>

// Convert decimal character into corresponding int
int main(void) {
    const char *str = "hello";
    printf("%c %c %c\n", str[1], str[2], str[4]);
    return 0;
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Strings

What's the mistake?

\footnotesize

<!---cppmd-file string_copy_1.c
#include <stdio.h>

int main(void) {
    const char *str = "hello";
    char str_copy[5];
    for(int i = 0; i < 5; i++) {
        str_copy[i] = str[i];
    }
    puts(str);
    puts(str_copy);
    return 0;
}
-->

# Strings


```
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
```

\includegraphics[width=0.8in]{hello_garbage.png}

We failed to null terminate the second string, so `puts` prints a few characters beyond the end of the string.  That's memory we don't own and didn't initialize -- it could be anything.

This is one of those uncommon cases when you can actually _see_ ``undefined behavior''

# Strings

\footnotesize

<!---cppmd-file string_copy_2.c
#include <stdio.h>

int main(void) {
    const char *str = "hello";
    char str_copy[6];
    for(int i = 0; i < 6; i++) {
        str_copy[i] = str[i];
    }
    puts(str);
    puts(str_copy);
    return 0;
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Strings

* `#include <string.h>` for helpful string functions:
    * `strlen(s)` returns length of string `s`
    * `strcmp(s1, s2)` compares two strings alphabetically
        * negative: `s1 alphabetically before `s2`
        * zero: `s1` and `s2` equal
        * positive: `s2` alphabetically before `s1`
    * See also: `strcpy`, `strcat`, `strtok`, others
    * [`http://www.cplusplus.com/reference/cstring/`](http://www.cplusplus.com/reference/cstring/)
