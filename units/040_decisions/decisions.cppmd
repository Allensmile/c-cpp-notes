# Outline

Decision statements

* `if / else if / else`
* `switch / case`

# if

\footnotesize

<!---cppmd-file eg_02_01_1.c
#include <stdio.h>

int main(void) {
    int number = 12;
    if(number % 2 == 0) {
        puts("yes");
    }
    return 0;
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# if / else

\footnotesize

<!---cppmd-file eg_02_01_2.c
#include <stdio.h>

int main(void) {
    int number = 13;
    if(number % 2 == 0) {
        puts("yes");
    }
    else {
        puts("no");
    }
    return 0;
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# if / else if / else

\scriptsize

<!---cppmd-file grading.c
#include <stdio.h>
int main(void) {
    int x = 79;
    if(x >= 90) {
        puts("A");
    }
    else if(x >= 80) {
        puts("B");
    }
    else if(x >= 70) {
        puts("C");
    }
    else if(x >= 60) {
        puts("D");
    }
    else {
        puts("F");
    }
    return 0;
}
-->

# if / else if / else

<!---cppmd-shell
gcc grading.c -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# switch / case

\tiny

<!---cppmd-file grading_switch.c
#include <stdio.h>
int main(void) {
    char grade = 'C';
    int points = 0;
    switch(grade) {
        case 'A':
            points = 4;
            break;
        case 'B':
            points = 3;
            break;
        case 'C':
            points = 2;
            break;
        case 'D':
            points = 1;
            break;
        default:
            points = 0;
            break;
    }
    printf("Grade %c contributes %d GPA points\n", grade, points);
}
-->

# switch / case

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

<!--

# Decision-statement summary

```c
if(a) {
    puts("a is true");
}

if(a) {
    puts("a is true");
}
else {
    puts("a is false");
}
```

# Decision-statement summary

```c
if(a) {
    puts("a was true");
}
else if(b) {
    puts("a is false and b is true");
}
else {
    puts("both a and b are false");
}
```

# Decision-statement summary

```c
  switch (integer expr) {
  case c1: stmt1;  // execution starting point for c1
  case c2: stmt2;
           break;  // exits switch block
  case c3:
  case c4: stmt3;
           stmt4;  // executes stmt3, stmt4 and stmtlast for c3 or c4 matches
  default: stmtlast;   // if no case matches
  }
```

-->

# Compound assignments

\centerline{\includegraphics[width=4in]{compound_assign.jpg}}

# Increment and decrement

\vspace{5mm}
\centerline{\includegraphics[width=4in]{incr_decr.jpg}}

* Note the difference:
    * `i++` increments `i` and evaluates to *old* `i`
    * `++i` increments `i` and evaluates to *new* `i`
    * Likewise for `i--`, `--i`

# Difference between i++ and ++i

\scriptsize

<!---cppmd-file incr_example.c
#include <stdio.h>
int main(void) {
    int i = 0;
    if(++i) {
        puts("++i was non-zero");
    }
    printf("i=%d\n", i);
    i = 0;
    if(i++) {
        puts("i++ was non-zero");
    }
    printf("i=%d\n", i);
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# for

<!---cppmd-file for_example.c
#include <stdio.h>
int main(void) {
    for(int i = 0; i < 10; i++) {
        printf("%d ", i);
    }
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# while

\footnotesize

<!---cppmd-file while_example.c
#include <stdio.h>
int main(void) {
    int i = 1;
    while((i % 7) != 0) {
        printf("%d ", i);
        i++;
    }
}
-->

# do / while

<!---cppmd-file do_while_example.c
#include <stdio.h>
int main(void) {
    int i = 0;
    do {
        printf("%d ", i);
        i++;
    } while((i % 7) != 0);
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

# Loop summary

* `while(boolean expression) { statements }`
    * Iterates $\geq$ 0 times, as long as expression is true
* `do { statements } while(boolean expression)`
    * Iterates $\geq$ 1 times; always once, then more times as long as expression is true
* `for(initialize; boolean exp; update) { stmts }`
    * `initialize` happens first; usually declares & assigns "index variable"
    * Iterates $\geq$ 0 times, as long as boolean expression is true
    * Right after `stmts`, `update` is run; often it increments the index variable (`i++`)
* More examples: [`http://bit.ly/cs120_loop_eg`](http://bit.ly/cs120_loop_eg)

<!---cppmd-file no-echo count_bases_1.c
#include <stdio.h>
#include <string.h>

// printf declared in stdio.h
// strlen declared in string.h

int main(void)
{
    // "dna" holds beginning of human mitochrondrial genome sequence
    const char *dna = "GATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCAT"
                      "TTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTG"
                      "GAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATT"
                      "CTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACCTACTA"
                      "AAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAACAATTGAAT";

    // Note: above is one long string literal, wrapped across lines

    int num_a = 0;
    int num_c = 0;
    int num_g = 0;
    int num_t = 0;

    // strlen is a function that returns the length of the string
    int dna_len = strlen(dna);

    for(int i = 0; i < dna_len; i++) {
        char dna_char = dna[i];
        // TODO: tally As, Cs, Gs, and Ts
    }

    printf("A:%d, C:%d, G:%d, T:%d\n", num_a, num_c, num_g, num_t);
}
-->

<!---cppmd-shell no-echo
mkdir -p ~/cs120; chmod a+rx ~/cs120
cp %PREV% ~/cs120 ; chmod a+r ~/cs120/%PREV%
-->

# DNA exercise

* Log into CS undergraduate cluster
    * Terminal: `ssh ` ***user*** `@ugrad` ***[1-24]*** `.cs.jhu.edu`
    * PuTTY: connect to: `ugrad` ***[1-24]*** `.cs.jhu.edu`
* `mkdir -p cs120/2_01`
* `cd cs120/2_01`
* `cp ~langmea/cs120/count_bases.c .`
* `nano count_bases.c`
    * Or your favorite `nano` alternative
* To test:
    * `gcc count_bases.c -std=c99 -pedantic -Wall -Wextra`
    * `./a.out`

# Text exercise

<!---cppmd-file no-echo count_chars.c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

// printf declared in stdio.h
// strlen declared in string.h

// isalpha, isdigit, isspace declared in ctype.h
// See also: http://www.cplusplus.com/reference/cctype/

int main(void)
{
    const char *text = "4 score and 7 years ago our fathers brought "
                       "4th on this continent, a new nation, "
                       "conceived in Liberty, and dedic8d to the "
                       "proposition that all men are cre8d =";

    int num_alpha = 0;  // # alphabet chars ('A'-'Z' and 'a'-'z')
    int num_digits = 0; // # digit chars ('0' - '9')
    int num_space = 0;  // # whitespace chars (spaces, tabs, newlines, etc)

    int text_len = strlen(text);

    int i = 0;
    while(i < text_len) { // don't modify the while loop or its condition
        // TODO: count alphabetical, digit and whitespace characters
    };

    // Special challenge: instead of using isalpha, isdigit and
    // isspace, use relational operators and your knowledge of the
    // characters' ASCII values: http://www.asciitable.com

    printf("# alphabetical:%d, # digit:%d, # whitespace:%d\n",
           num_alpha, num_digits, num_space);
}
-->

<!---cppmd-shell no-echo
mkdir -p ~/cs120; chmod a+rx ~/cs120
cp %PREV% ~/cs120 ; chmod a+r ~/cs120/%PREV%
-->

* (Assuming you're still in `cs120/2_01` subdirectory)
* `cp ~langmea/cs120/count_chars.c .`
* `nano count_chars.c`
    * Or your favorite `nano` alternative
* To test:
    * `gcc count_chars.c -std=c99 -pedantic -Wall -Wextra`
    * `./a.out`

# Characters, strings, arrays

* We said a `char` variable holds a single character
    * `char digit = '4';`
    * `char bang = '!';`
    * Note: these *must* be single quotes; in C/C++, double quotes are strictly for strings, single quotes strictly for `char`s
* Behind the scenes, `char` is just like `int`
    * This is valid: `char digit = '4' - 1;`
    * `digit` now contains the character `'3'`
