---
urlcolor: blue
---

# Course conventions

\centering

\Large

Ben Langmead

ben.langmead@gmail.com

www.langmead-lab.org

\centerline{\includegraphics[width=2in]{../images/jhu_vertical_blue.png} \includegraphics[width=2in]{../images/wse_vertical_blue.png}}

\centerline{\includegraphics[width=1in]{../images/cc_by.png}}

\footnotesize

Source markdown available at [github.com/BenLangmead/c-cpp-notes](https://github.com/BenLangmead/c-cpp-notes)

# Course conventions

Here I describe conventions used throughout the course notes

# Formatting

I adhere fairly closely to the formatting guidelines in the [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html#Formatting)

I will use `()` to denote an empty argument list 

# Course conventions

From here on, the conventions I descrive have more to do with language details than with basics

If you are learning C/C++ for the first time, you can skim these; they exist to set expectations for people who already know some C/C++

# Language versions

C standard used is [C99](https://en.wikipedia.org/wiki/C99)

* Though I will explicitly discourage use of variable length arrays

C++ standard: [C++11](https://en.wikipedia.org/wiki/C%2B%2B11)

* Though I will deliberately delay introducing some of the C++11 "goodies" like `auto` and ranged-`for`

# Compiling

Slides will often present source code

Where possible/convenient, code for the full program will be shown:

<!---cppmd-file mysterious.c
#include <stdio.h>

int main() {
    int x = 71;
    float y = 5.0 / 9.0 * (x - 32);
    printf("%0.2f", y); // print up to 2 decimal places
    return 0;
}
-->

# Compiling

When the code is too long to fit clearly on a slide, we use `...` to denote elided code

\footnotesize

```c
    class GradeList {
    public:
        ...
        void add(double grade) {
            grades.push_back(grade);
        }
        ...
    private:
        std::vector<double> grades;
        ...
    };
```

# Compiling

Sometimes compilation will be:

* from source to binary in one command
* from source to object files (`.o`) in one *compilation* command, and from `.o` to binary in a second *linking* command

I will switch between these depending on the situation


