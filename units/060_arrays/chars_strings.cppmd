# Arrays

* TODO

# Assert

* `assert` is a powerful tool for testing your assumptions
* TODO
# GPA exercise

* You must submit individually, but you can talk to each other and work together
* Today you must *submit your code before you leave*
    * Whether or not you're totally done
    * Your work is factored into your attendance grade
    * Good practice for homework submission
* We will continue to do this regularly

# How to submit

* Review zipping and transferring instructions on Piazza
    * [`http://j.mp/cs120_hts`](http://j.mp/cs120_hts)
* Submit zip file on Blackboard:
    * Blackboard course: EN.600.120.01.SP16
    * Click "In-Class Exercise Submission" on left
    * Click "Feb 3-4"
    * Attach File -> Browse My Computer
    * Select zip
    * Submit

# GPA exercise

* Log into CS undergraduate cluster
* From your home directory:
    * `mkdir -p cs120/2_03`
    * `cd cs120/2_03`
* Edit template:
    * `cp ~langmea/cs120/gpa.* .`
    * `nano gpa.c`
        * Or your favorite `nano` alternative
    * Read comments throughout the file for instructions
* Test:
    * `gcc gpa.c -std=c99 -pedantic -Wall -Wextra`
    * `./a.out`
* *Submit before you leave*

<!---cppmd-file no-echo gpa.c
/*
  This is an incomplete program to compute the GPA of a set of courses.
  gpa.in contains sample input (plain text file)
  gpa.out contains sample output (plain text file)

  It uses the "standard in" file handle to accept its input.  We will
  learn more about that later.  For now, what this means is: if you
  have a file called "input.txt" that you want to profiled as input,
  then run:

  ./a.out < input.txt

  This "redirects" the contents of "input.txt" to the standard in file
  handle so that it is read properly.

  When you did your gpa.in contains an example input:

  ./a.out < gpa.in

  And gpa.out contains the *correct* output given that input.

  (By the way, the slash-star star-slash notation surrounding this
  comment allows you to create a multi-line comment.  This is easier
  than doing // over and over again.)
*/

#include <stdio.h>   // for basic I/O: puts, getchar, printf
#include <ctype.h>   // for character related functions: isspace, isdigit
#include <string.h>  // for string functions:

// a symbolic constant; when we write GSIZE, preprocessor substitutes 3
#define GSIZE 3

// function declarations are called prototypes
// every function must be declared or fully defined before it is called
double getpoints(char g[]);

int main(void) {
    char grade[GSIZE];
    int i = 0;
    int ch = 0;
    int credits = 0;
    double points = 0;
    double totalpoints = 0;
    double totalcredits = 0;

    puts("enter grades and credits: ");

    // repeat until end of input
    while ((ch = getchar()) != EOF) {
        // store non-whitespace characters in grade buffer
        i = 0;
        while (!isspace(ch)) {
            grade[i++] = ch;
            ch = getchar();
        }
        grade[i] = '\0';  // "terminate" string with null character
        points = getpoints(grade); // convert to GPA scale

        // skip whitespace
        while (isspace(ch)) {
            ch = getchar();
        }

        // read credits, one character at a time, build integer
        credits = 0;
        while (isdigit(ch)) {
            credits = credits * 10 + ch - '0';
            ch = getchar();
        }

        // go to next line
        while (ch != '\n') {
            ch = getchar();
        }

        printf("grade is: %-2s  credits = %d  points = %4.1f \n",
                grade, credits, points);

        // TODO: factor this grade into the GPA

    } // while not EOF

    // TODO: print the final GPA

	return 0;
}

// Converts a letter grade to its corresponding point value.
double getpoints(char g[]) {
    double points = 0;
    g[0] = toupper(g[0]);
    switch (g[0]) {
        case 'A': points = 4; break;
        case 'B': points = 3; break;
        case 'C': points = 2; break;
        case 'D': points = 1; break;
        default: points = 0;
    }

    if (g[1] == '+' && 'B' <= g[0] && g[0] <= 'D') {
        points += .3;
    }
    if (g[1] == '-' && 'A' <= g[0] && g[0] <= 'C') {
        points -= .3;
    }
    return points;
}
-->

<!---cppmd-shell no-echo
mkdir -p ~/cs120; cp gpa.c ~/cs120
chmod a+rx ~/cs120; chmod a+r ~/cs120/gpa.c
-->
