# Intermediate programming

* Bookmark course page: [`http://ugrad.cs.jhu.edu/~cs120`](http://ugrad.cs.jhu.edu/~cs120)
* Sign up for & bookmark Piazza: [`http://j.mp/120sp16`](http://j.mp/120sp16)
* We'll also use Blackboard -- more on this later

# Administrative: Syllabus

* Prerequisite: Java or another language (no need for C/C++)
* 3 75-minute meetings per week
    * Some lecture, for learning concepts, intuition
        * Lectures are participatory: please ask questions and interact
    * In-class coding problems, with help from instructor & TAs
    * Brief recap at end of class
* In-class quizzes every other Friday starting 2nd Friday
* In-class midterm

# Administrative: Syllabus

* 4 recommended textbooks
    * Deitel & Deitel: C How to Program
    * Kernighan & Ritchie, C Programming Language (2nd ed)
    * Deitel & Deitel: C++ How to Program
    * Koenig & Moo: Accelerated C++ 2000

# Administrative: Syllabus

* Grading
    * Participation: 15%
        * To succeed: show up & follow in-class examples & tasks
        * In-class work really matters! - and you'll have our help
        * Some in-class work submitted via Blackboard (not graded)
    * Quizzes: 15%
        * ~6 quizzes, every other Friday starting 2/5
        * Conducted on Blackboard
    * Midterm: 15%
        * Written, in-class on 3/11

# Administrative: Syllabus

* Grading, continued
    * Homework: 35%
        * ~7 homeworks
        * Some individual, some in pairs
        * Design, implement, test, debug, profile C/C++ programs
        * Submission via Blackboard
    * Final team project: 20%
        * Work with teammates to design and build a large, object-oriented software tool
        * Likely that all teams will work on same problem
        * Likely due during final exam period
        * More details later
    * No final exam (the project is the "exam")

# Administrative: Syllabus

* Late policy
    * All homeworks due at 11pm on due date
    * 11-11:30pm: -10%
    * No submissions accepted after 11:30pm

# Administrative: TAs

* We will have an excellent team of Teaching Assistants (TAs) and Course Assistants (CAs)
    * Identities and office hours are to be determined
    * Don't stay stuck!  Talk to them

# Administrative: Professor

* I will have a weekly office hour
    * Office: 329 Malone Hall
    * Time to be determined once TA office hour is settled
    * Don't stay stuck!
    * Don't be afraid!

# Administrative: Sections

* 4 sessions of CS120 this spring
    * This is section 2
    * Section 1 & 3 taught by Prof. Sara More
    * Section 4 taught by PhD students Shyam and Yotam
* We will strive mightily to keep all 4 sections in sync
    * Same topics covered on approximately the same days
    * Quizzes on same days
    * Midterm on same day
    * Same homeworks, due on same days
    * Final project same across sections, due dates same
    * All sections share a Piazza class site
    * TAs/CAs are (mostly) shared

# Administrative: C/C++ programming

* We will be programming!
    * In class
    * For homework
    * For final project

* Important that the *environment* you use to test your programs is the same environment we use to grade them

# Administrative: C/C++ programming

* Environment where you test your programs must be the same as the environment we use to grade them

* Environment =
    * version of `gcc` - C compiler
    * version of `g++` - C++ compiler
    * version of `make`, `gcov`, `gdb`, `valgrind`, other tools
    * parameters specified when running those tools
    * etc

# Administrative: C/C++ programming

* Environment where you test your programs must be the same as the environment we use to grade them

* Two components to making sure the environments match:
    * Always test your assignments on the CS dept Linux undergraduate cluster (more on this later)
    * Always use prescribed parameters for `gcc`, `g++` & friends
        * Prescribed parameters given in class or in homeworks as needed

# Administrative: CS account

* If a CS major or minor, you are entitled to a permanent account on the Linux undergraduate cluster
    * If you haven't already, visit Steve DeBlasio in Malone G61A
* Otherwise, I have a form; fill it out and return to me today
    * Application for access just for this course & semester

# Introducing myself

* Ben Langmead
* Office: 329 Malone Hall
* 4th year Assistant Professor
* Study Computational Genomics
    * I plan to sneak some genomics into our homework assignments
* Lab website: [`http://www.langmead-lab.org`](http://www.langmead-lab.org)

# What's Computational Genomics?

* For more:
    * [`http://www.langmead-lab.org/teaching-materials/`](http://www.langmead-lab.org/teaching-materials/)
    * [`http://bit.ly/ADS1_videos`](http://bit.ly/ADS1_videos)

# Nature and purpose of CS120

* Course goals
    * (There's a list of course outcomes on the official syllabus; this is the conversational version)
    * Learn C
        * Language features
        * Pointers & dynamic memory allocation
        * "Low-level" programming
    * Learn C++
        * How is it different from C?
        * Object-oriented programming
        * Generic programing

# Nature and purpose of CS120

* Course goals, continued
    * Gain proficiency in Linux & related programming tools
        * Basic command-line tools
        * Compilers, debuggers, profilers
    * Grow as a programmer & software engineer
        * Test
        * Debug
        * "Long-term lazy"
        * Requirements -> design -> implementation

# Why C/C++?

* Ubiquitous, efficient, mature

* Ubiquitous: A huge fraction of the world's most crucial code is written in C
    * Used Java?  JVM is written in C, as are many libraries
    * Used Python?  Interpreter is written in C, as are many libraries
    * Used the Internet?  Protocol stacks, code for the embedded systems your traffic traverses, apache web servers, ...
    * Ubiquitous in science
        * My lab members and I program in C/C++ all the time

# Why C/C++?

* Mature:
    * Around since the 70s (for C, 80s for C++)
    * Undergraduates have learned it for decades
    * Software jobs often require it; "we need someone who...
        * ...can make something really fast if needed"
        * ...knows how to program all kinds of weird hardware"
        * ...knows how to interact with the operating system"
        * ...can handle our large codebase, written in C"

# Why C/C++?

* Efficient: With higher-level languages like Java and Python, you make a trade
    * High-level languages "take care of things" for you
        * Programs can be more concise, abstract
        * Harder to make mistakes
    * ...but they also hide things from you
        * How things are laid out in memory
        * When memory is allocated and de-allocated
        * Special hardware features, especially non-portable features

# Unix / Linux

* You will need to get familiar with
    * How to log into a Unix/Linux system
        * `ssh` if you're on a Max or Linux system
        * PuTTY if you're on Windows
    * Basic command line
        * Navigating directory structure
        * Making / removing directories
        * Copying, moving files
    * How to edit files
        * With `nano`, or (more advanced) `emacs` or `vim`

# Unix / Linux

* Here's where to get started:
    * [`http://rik.smith-unna.com/command_line_bootcamp`](http://rik.smith-unna.com/command_line_bootcamp)
    * For Friday, be ready to:
        * Log into undergraduate Linux cluster
        * Basic Linux
        * Edit source files
