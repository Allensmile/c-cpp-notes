# Sanitizers

It is easy to shoot yourself in the foot with C/C++

The language itself does little to help you to stay "in bounds," accessing only your own memory and avoiding undefined behavior

Compiler _warnings_ and _sanitizers_ can help

# Compiling with warnings

Recall the typical way we've compiled programs:

<!---cppmd-file no-echo hello_world.c
#include <stdio.h>

// Print "Hello world!" followed by newline and exit
int main(void)
{
    puts("Hello world!");
    return 0;
}
-->

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra
./a.out
-->

`-Wall -Wextra` enable many warnings.  More are available, but it's not generally advisable to use them:

\scriptsize
https://gcc.gnu.org/onlinedocs/gcc-6.4.0/gcc/Warning-Options.html#Warning-Options
\normalsize

# Compiling with warnings

Recommended: Use environment variables to save on typing:

<!---cppmd-shell
export ISOC99="-std=c99 -pedantic"
export WARN="-Wall -Wextra"
-->

<!---cppmd-shell
gcc %PREV% $ISOC99 $WARN
./a.out
-->

# Compiling with warnings

Let's write some risky code...

# Compiling with warnings

\footnotesize

<!---cppmd-file incr_ser.c
#include <stdio.h>

int *increasing_series(int step) {
    int series[10];
    for(int i = 0; i < 10; i++) {
        series[i] = i * step;
    }
    return series;
}

int main(void) {
    printf("last in series: %d\n", increasing_series(10)[9]);
    return 0;
}
-->

# Compiling with warnings

`series` is a local variable "on the stack."  It goes out of scope when `increasing_series` returns, making the returned pointer invalid.  Program might crash, or might not.  But it's a serious bug that will crash at least some of the time on some systems.

What happens when we compile and run?

# Compiling with warnings

\scriptsize

<!---cppmd-shell
gcc incr_ser.c $ISOC99 $WARN
./a.out
-->

\normalsize

Compiler issues a warning, but compilation succeeds.

Program runs successfully and prints correct output.

* But that's not guaranteed!

# Compiling with warnings

Always read and fix the compiler warnings

* This is the "long-term lazy" thing to do
* Ignoring warnings makes your life harder later on

Hacker pledge:

* Warnings are bugs and I will treat them as such

# Compiling with warnings and sanitizers

Now we add some flags to enable the *sanitizer*:

\footnotesize

<!---cppmd-shell
gcc %PREV% $ISOC99 $WARN -fsanitize=address,undefined
./a.out
-->

\normalsize

Has nothing changed?  Let's write some risky code...

# Sanitizers

\footnotesize

<!---cppmd-file incr_ser.c
#include <stdio.h>

int *increasing_series(int step) {
    int series[10];
    for(int i = 0; i < 10; i++) {
        series[i] = i * step;
    }
    return series;
}

int main(void) {
    printf("last in series: %d\n", increasing_series(10)[9]);
    return 0;
}
-->

# Sanitizers

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra -fsanitize=address,undefined
./a.out
-->

# Sanitizers

<!---cppmd-file string_copy.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

const char *string_copy(const char *orig) {
    char *fresh = malloc(strlen(orig));
    assert(fresh != NULL);
    strcpy(fresh, orig);
    return fresh;
}

int main(void) {
    const char *hello_copy = string_copy("hello");
    assert(hello_copy != NULL);
    printf("%s\n", hello_copy);
    return 0;
}
-->

# Sanitizers

<!---cppmd-shell
gcc %PREV% -g -std=c99 -pedantic -Wall -Wextra -fsanitize=address,undefined,leak
./a.out
-->

# `valgrind`

* Very easy-to-use tool for finding memory leaks and other pointer/memory mistakes
* Compile your program with `-g` option for more helpful output from `valgrind`

\footnotesize

`valgrind --leak-check=full ./your-program <arg1> <arg2> ...`

e.g. for hw3:

`valgrind --leak-check=full ./hw3 catalog.txt`

# `valgrind`

<!---cppmd-file valgrind_eg1.c
#include <stdio.h>

int main(void) {
    puts("  ***  My program's output  ***");
    return 0;
}
-->

\footnotesize

```
gcc -o valgrind_eg1 valgrind_eg1.c -std=c99 -pedantic -Wall -Wextra -g
valgrind --leak-check=full ./valgrind_eg1
```

# `valgrind`

\scriptsize

<!---cppmd-shell no-echo
valgrind --leak-check=full ./valgrind_eg1
-->

# `valgrind`

\scriptsize

<!---cppmd-file leaky_buggy_strcpy.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

char *string_copy(const char *orig)
{
    char *fresh = malloc(strlen(orig));
    assert(fresh != NULL);
    strcpy(fresh, orig);
    return fresh;
}

int main(void)
{
    char *hello_copy = string_copy("hello");
    assert(hello_copy != NULL);
    printf("%s\n", hello_copy);
    return 0;
}
-->

# `valgrind`

<!---cppmd-shell
gcc %PREV% -std=c99 -pedantic -Wall -Wextra -g
./a.out
-->

# `valgrind`

\scriptsize

<!---cppmd-shell no-echo
valgrind --leak-check=full ./a.out
-->
